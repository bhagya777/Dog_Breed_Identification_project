# -*- coding: utf-8 -*-
"""Dog_Breed_Idendification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h1j6sVvgWaH_Msd3qyT1MNDkqnjunnmp
"""

import pandas as pd
import numpy as np

#!unzip "drive/MyDrive/Dog_Breed_Identification_project/dog-breed-identification.zip" -d "drive/MyDrive/Dog_Breed_Identification_project/"

"""# Dog Breed Identification Project
  TensorFlow is used

## 1. Problem Statement:
      Identify Dog breed of the given dog's picture.

## 2. Data:
      From Kaggle
      Unstructured Data(Images)

## 3. Evaluation:
      A file with prediction probabilities for each dog breed of each test image.

## 4. Features:
      * There are 120 breeds of dog.
      * 10000+ images in training set. (with labels)
      * 10000+ images in test set. (no labels)

# Getting workspace Ready

  * Import TensorFlow 2.x
  * Import TensorFlow Hub
  * Use GPU
"""

import tensorflow as tf
import tensorflow_hub as hub
print("TensorFlow version: ",tf.__version__)
print("TensorFlow Hub version:",hub.__version__)

# Check GPU availability
print("GPU", "available!!!" if tf.config.list_physical_devices("GPU") else "not available!!!")

"""# Getting Data Ready (Turning It into Tensors)
   Turning Data (Images) into Tensors i.e. Numerical Representation.
"""

import pandas as pd
labels_csv=pd.read_csv("drive/MyDrive/Dog_Breed_Identification_project/labels.csv")
print(labels_csv.describe())
labels_csv.head()

labels_csv["breed"].value_counts()

labels_csv["breed"].value_counts().plot.bar(figsize=(20,10))

labels_csv["breed"].value_counts().median()

from IPython.display import Image
Image("drive/MyDrive/Dog_Breed_Identification_project/train/001513dfcb2ffafc82cccf4d8bbaba97.jpg")

"""# Getting Images and Labels
  Get list of Image File pathnames.
"""

filenames=["drive/MyDrive/Dog_Breed_Identification_project/train/"+ filename +".jpg" for filename in labels_csv["id"]]
filenames[:10]

#Checking if number of filenames match number of images
import os
if len(os.listdir("drive/MyDrive/Dog_Breed_Identification_project/train/"))==len(filenames):
  print("Filenames match.Proceed!")
else:
  print("Filenames number not match.")

Image(filenames[9000])

labels_csv["breed"][9000]

"""###  Converting Labels into numbers"""

import numpy as np
labels=labels_csv["breed"]
labels=np.array(labels)
labels

len(labels)

"""### Checking Missing Data"""

if len(labels)==len(filenames):
  print("No missing Data!")
else:
  print("Some Data is Missing!")

"""#### Finding unique labels ie. breeds."""

unique_breeds=np.unique(labels)
len(unique_breeds)

"""#### Turning every label into boolean array"""

boolean_labels=[label==unique_breeds for label in labels]
boolean_labels[:2]

len(boolean_labels)

print(labels[0])
print(np.where(unique_breeds==labels[0]))
print(boolean_labels[0].argmax())
print(boolean_labels[0].astype(int))

"""# Splitting Data into Training and Validation Data set"""

x=filenames
y=boolean_labels

NUM_IMAGES=1000 #@param{type:"slider",min:1000,max:10000,step:1000}

from sklearn.model_selection import train_test_split
x_train,x_val,y_train,y_val=train_test_split(x[:NUM_IMAGES],
                                             y[:NUM_IMAGES],
                                             test_size=0.2,
                                             random_state=1)
len(x_train),len(x_val),len(y_train),len(y_val)

x_train[:5],y_train[:2]

"""# Preprocessing (Turning Images into Tensors)

Function should:
  1. Take image filepath as input.
  2. Use TensorFlow to read the file and save it to a variable, `image`.
  3. Turn `image` (.jpg) into tensors.
  4. Normalize `image` Convert colour channel values fro 0-255 to 0 to 1.
  5. Resize `image` to be in shape of (250,250).
  6. Return the modified `image`.
"""

from matplotlib.pyplot import imread
image=imread(filenames[9000])
image.shape

image[:2]

image.max(), image.min()

tf.constant(image)[:2]

"""## Function Creation"""

IMG_SIZE=250

def process_image(image_path,img_size=IMG_SIZE):
  """
  Takes file patrh as input and gives tensor as output
  """
  image=tf.io.read_file(image_path)
  #Converting image to numerical tensor with 3 colour channels ie. Red, Green, Blue
  image=tf.image.decode_jpeg(image,channels=3)
  #Converting colour channel values from 0-255 to 0 to 1.
  image=tf.image.convert_image_dtype(image, tf.float32)
  #Resize the image
  image=tf.image.resize(image,size=[IMG_SIZE,IMG_SIZE])

  return image

"""## Turning Data into Batches
   As trying to process all the 10000+ images at once will be difficult (will be slow) as they won't fit in GPU's memory.
   Let's make batch size 20 ie. 20 images at a time.

   In order to use TensorFlow effectively, data should be in the form of tensor couples like:
   `(image,label)`

### Function for returning tuple (image, label)
"""

def get_image_label(image_path,label):
  """
  Takes file path and label, processes image and returns tuple of (image, label)
  """
  image=process_image(image),
  return image,label

(process_image(x[32]),tf.constant(y[32]))

